{"version":3,"sources":["components/PostsList/PostsList.jsx","api/api.js","api/posts.js","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","api/users.js","index.js"],"names":["PostsList","posts","selectedPostId","selectPost","className","map","post","key","id","userId","title","type","onClick","target","defaultProps","BASE_URL","getData","url","fetch","then","response","ok","Error","status","statusText","json","result","data","getPosts","getPostDetails","postId","getPostComments","comments","filter","comment","removeCommentById","method","createComment","name","email","body","JSON","stringify","headers","NewCommentForm","addComment","useState","setName","setEmail","setBody","onSubmit","event","preventDefault","placeholder","value","onChange","PostDetails","setPost","setComments","isVisibleComments","setVisibleComments","loadPosts","a","loadComments","removeComment","useEffect","length","uuidv4","App","filteredPosts","setFilteredPosts","users","setUsers","selectedUserId","setSelectedUserId","setSelectedPostId","loadAllPosts","loadUsers","usersArr","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.29b57331.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\n\nexport const PostsList = ({ posts, selectedPostId, selectPost }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li key={post.id} className=\"PostsList__item\">\n          <div>\n            <b>\n              [User #\n              {post.userId}\n              ]:\n            </b>\n            {post.title}\n          </div>\n          <button\n            type=\"button\"\n            className=\"PostsList__button button\"\n            onClick={({ target }) => selectPost(post.id)}\n          >\n            {post.id === selectedPostId ? 'Close' : 'Open'}\n          </button>\n        </li>\n      ))}\n    </ul>\n  </div>\n\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    userId: PropTypes.number,\n    title: PropTypes.string,\n    body: PropTypes.string,\n    createdAt: PropTypes.string,\n    updatedAt: PropTypes.string,\n  })),\n  selectedPostId: PropTypes.number.isRequired,\n  selectPost: PropTypes.func.isRequired,\n};\n\nPostsList.defaultProps = {\n  posts: [],\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const getData = url => (fetch(`${BASE_URL}${url}`).then((response) => {\n  if (!response.ok) {\n    throw new Error(`${response.status}: ${response.statusText}`);\n  }\n\n  return response.json()\n    .then(result => result.data);\n}));\n\nexport const remove = url => (fetch(`${BASE_URL}${url}`, { method: 'DELETE' })\n  .then(response => response.json())\n  .then(result => result.data)\n);\n\nexport const create = (url, data) => (fetch(`${BASE_URL}${url}`, {\n  method: 'POST',\n  body: JSON.stringify(data),\n  headers: {\n    'Content-Type': 'application/json; charset=UTF-8',\n  },\n})\n  .then(response => response.json())\n  .then(result => result.data)\n);\n","import { getData, remove, create } from './api';\n\nexport const getPosts = () => getData('/posts');\n\nexport const getUserPosts = userId => (getPosts()\n  .then(posts => posts.filter(post => post.userId === userId))\n);\n\nexport const getPostDetails = postId => getData(`/posts/${postId}`);\n\nexport const getPostComments = postId => (\n  getData(`/comments`)\n    .then(comments => comments.filter(comment => comment.postId === postId))\n);\n\nexport const removeCommentById = id => remove(`/comments/${id}`);\n\n// eslint-disable-next-line\nexport const createComment = ({ postId, name, email, body }) => {\n  return create(`/comments`, {\n    postId, name, email, body,\n  });\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ addComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    addComment({\n      name,\n      email,\n      body,\n    });\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={event => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  addComment: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  getPostDetails,\n  getPostComments,\n  removeCommentById,\n  createComment,\n} from '../../api/posts';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ postId }) => {\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [isVisibleComments, setVisibleComments] = useState(true);\n\n  const loadPosts = async() => {\n    setPost(await getPostDetails(postId));\n  };\n\n  const loadComments = async() => {\n    setComments(await getPostComments(postId));\n  };\n\n  const removeComment = async(id) => {\n    await removeCommentById(id);\n    loadComments();\n  };\n\n  const addComment = async({ name, email, body }) => {\n    await createComment({\n      postId,\n      name,\n      email,\n      body,\n    });\n    loadComments();\n  };\n\n  useEffect(() => {\n    loadPosts();\n    loadComments();\n  }, [postId]);\n\n  const handleHideComments = () => {\n    setVisibleComments(!isVisibleComments);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post && post.title}</p>\n      </section>\n\n      {comments.length > 0 && (\n        <section className=\"PostDetails__comments\">\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => handleHideComments()}\n          >\n            {isVisibleComments ? 'Hide comments' : 'Show comments'}\n          </button>\n\n          {isVisibleComments && (\n            <ul className=\"PostDetails__list\">\n              {comments.map(comment => (\n                <li\n                  key={uuidv4()}\n                  className=\"PostDetails__list-item\"\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => removeComment(comment.id)}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          )}\n        </section>\n      )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm addComment={addComment} />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPosts, getUserPosts } from './api/posts';\nimport { getUsers } from './api/users';\n\nconst App = () => {\n  const [filteredPosts, setFilteredPosts] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const loadAllPosts = () => {\n    getPosts()\n      .then((posts) => {\n        setFilteredPosts(posts);\n      });\n  };\n\n  const loadUsers = () => {\n    getUsers()\n      .then(usersArr => usersArr.filter(user => user.id && user.name))\n      .then(setUsers);\n  };\n\n  useEffect(() => {\n    loadAllPosts();\n    loadUsers();\n  }, []);\n\n  useEffect(() => {\n    if (selectedUserId) {\n      getUserPosts(selectedUserId)\n        .then(setFilteredPosts);\n    } else {\n      loadAllPosts();\n    }\n  }, [selectedUserId]);\n\n  const selectPost = (postId) => {\n    if (selectedPostId !== postId) {\n      setSelectedPostId(postId);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={(event) => {\n              setSelectedUserId(+event.target.value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option key={user.id} value={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={filteredPosts}\n            selectedPostId={selectedPostId}\n            selectPost={selectPost}\n          />\n        </div>\n        <div className=\"App__content\">\n          {selectedPostId > 0 && (\n            <PostDetails postId={selectedPostId} />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { getData } from './api';\n\nexport const getUsers = () => getData('/users');\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}